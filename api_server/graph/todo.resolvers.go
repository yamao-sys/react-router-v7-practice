package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"app/graph/generated"
	"app/graph/model"
	"app/lib/auth"
	"app/lib/dataloaders"
	models "app/models/generated"
	"app/view"
	"context"
	"fmt"
	"strconv"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.CreateTodoResponse, error) {
	user := auth.GetUser(ctx)
	if user == nil {
		return nil, view.NewUnauthorizedView(fmt.Errorf("unauthorized error"))
	}

	return r.todoService.CreateTodo(ctx, input, user.ID)
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.UpdateTodoInput) (*model.UpdateTodoResponse, error) {
	user := auth.GetUser(ctx)
	if user == nil {
		return nil, view.NewUnauthorizedView(fmt.Errorf("unauthorized error"))
	}

	intID, _ := strconv.Atoi(id)
	return r.todoService.UpdateTodo(ctx, intID, input, user.ID)
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (string, error) {
	user := auth.GetUser(ctx)
	if user == nil {
		return "", view.NewUnauthorizedView(fmt.Errorf("unauthorized error"))
	}

	intID, _ := strconv.Atoi(id)
	return r.todoService.DeleteTodo(ctx, intID, user.ID)
}

// FetchTodo is the resolver for the fetchTodo field.
func (r *queryResolver) FetchTodo(ctx context.Context, id string) (*models.Todo, error) {
	user := auth.GetUser(ctx)
	if user == nil {
		return &models.Todo{}, view.NewUnauthorizedView(fmt.Errorf("unauthorized error"))
	}

	intID, _ := strconv.Atoi(id)
	return r.todoService.FetchTodo(ctx, intID, user.ID)
}

// FetchTodoLists is the resolver for the fetchTodoLists field.
func (r *queryResolver) FetchTodoLists(ctx context.Context) ([]*models.Todo, error) {
	user := auth.GetUser(ctx)
	if user == nil {
		return models.TodoSlice{}, view.NewUnauthorizedView(fmt.Errorf("unauthorized error"))
	}

	return r.todoService.FetchTodoLists(ctx, user.ID)
}

// Content is the resolver for the content field.
func (r *todoResolver) Content(ctx context.Context, obj *models.Todo) (string, error) {
	return obj.Content.String, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *todoResolver) CreatedAt(ctx context.Context, obj *models.Todo) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *todoResolver) UpdatedAt(ctx context.Context, obj *models.Todo) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *models.Todo) (*models.User, error) {
	return dataloaders.GetUser(ctx, strconv.Itoa(obj.UserID))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Todo returns generated.TodoResolver implementation.
func (r *Resolver) Todo() generated.TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
